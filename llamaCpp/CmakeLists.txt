cmake_minimum_required(VERSION 3.13)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Set release build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()

project(LlamaCppWrapper)

set(SOURCE_FILES_LIST
    ${PROJECT_SOURCE_DIR}/src/JniCode.cpp
    ${PROJECT_SOURCE_DIR}/src/JNIMethods/InitJni.cpp
    ${PROJECT_SOURCE_DIR}/src/JNIMethods/PredictJni.cpp
    ${PROJECT_SOURCE_DIR}/src/JNIMethods/FreeJni.cpp
)

if(ANDROID)
    set(LLAMA_CURL OFF CACHE BOOL "Disable CURL for Android" FORCE)
    set(LLAMA_INSTALL_LLDB_FORMATTERS OFF CACHE BOOL "Disable lldb formatters for Android" FORCE)
    set(ANDROID_ARM_NEON ON CACHE BOOL "Enable NEON" FORCE)
    
    # Optimisations GGML pour Android
    set(GGML_NATIVE OFF CACHE BOOL "Disable native optimizations" FORCE)
    set(GGML_OPENMP ON CACHE BOOL "Enable OpenMP" FORCE)

endif()

if(NOT ANDROID)
    find_package(JNI REQUIRED)
    message(STATUS "JNI_INCLUDE_DIRS: ${JNI_INCLUDE_DIRS}")
endif()

set(BUILD_SHARED_LIBS ON)
set(LLAMA_BUILD_COMMON ON CACHE BOOL "Build common utils library" FORCE)

add_subdirectory(extern/llama.cpp llama_cpp_build)

add_library(jniLlamaCppWrapper SHARED ${SOURCE_FILES_LIST})

target_include_directories(jniLlamaCppWrapper
    PRIVATE
    ${PROJECT_SOURCE_DIR}/include
    ${JNI_INCLUDE_DIRS}
    ${PROJECT_SOURCE_DIR}/extern/llama.cpp/include
    ${PROJECT_SOURCE_DIR}/extern/llama.cpp/common
)

if(ANDROID)
    if (${ANDROID_ABI} STREQUAL "arm64-v8a")
        target_compile_options(jniLlamaCppWrapper PRIVATE
            -DGGML_USE_CPU 
            -DGGML_USE_CPU_AARCH64
            -DGGML_CPU_ARM_ARCH=armv9-a
            -DGGML_F16C=ON
            -DGGML_FMA=ON
                -DLLAMA_VULKAN=1
            "-march=armv9-a+sve2+sme2+bf16+sve2+dotprod+fp16fml+i8mm"
            -O3
            -DNDEBUG
            #-Og
            -ffunction-sections -fdata-sections
            -fno-exceptions -fno-rtti
            -fvisibility=hidden
        )
    endif()
else()
    target_compile_options(jniLlamaCppWrapper PRIVATE -march=native -O3)
    find_package(JNI REQUIRED)
endif()

set_target_properties(jniLlamaCppWrapper
    PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/libs"
)

target_link_libraries(jniLlamaCppWrapper PRIVATE llama common)

# Test executable (inchang√©)
if(NOT ANDROID)
    enable_testing()
    add_executable(jni_methods_test tests/JniMethods_test.cpp)
    target_include_directories(jni_methods_test
        PRIVATE
        ${PROJECT_SOURCE_DIR}/include
        ${JNI_INCLUDE_DIRS}
        ${PROJECT_SOURCE_DIR}/extern/llama.cpp/include
        ${PROJECT_SOURCE_DIR}/extern/llama.cpp/common
    )
    target_link_libraries(jni_methods_test PRIVATE jniLlamaCppWrapper)
endif()
