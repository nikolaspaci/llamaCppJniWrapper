cmake_minimum_required(VERSION 3.13)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

project(LlamaCppWrapper)

set(SOURCE_FILES_LIST
    ${PROJECT_SOURCE_DIR}/src/JniCode.cpp
    ${PROJECT_SOURCE_DIR}/src/JNIMethods/InitJni.cpp
    ${PROJECT_SOURCE_DIR}/src/JNIMethods/PredictJni.cpp
    ${PROJECT_SOURCE_DIR}/src/JNIMethods/FreeJni.cpp
)

find_package(JNI REQUIRED)
message(STATUS "JNI_INCLUDE_DIRS: ${JNI_INCLUDE_DIRS}")
# Tell CMake to look into the 'llama.cpp' folder
# It will read the CMakeLists.txt of llama.cpp and create a "llama" target
set(BUILD_SHARED_LIBS ON)
#indicate that will use common utils
set(LLAMA_BUILD_COMMON ON CACHE BOOL "Build common utils library" FORCE)

add_subdirectory(extern/llama.cpp llama_cpp_build)

add_library(jniLlamaCppWrapper SHARED ${SOURCE_FILES_LIST})

#include header dir
target_include_directories(jniLlamaCppWrapper
    PRIVATE
    ${PROJECT_SOURCE_DIR}/include
    ${JNI_INCLUDE_DIRS}
    ${PROJECT_SOURCE_DIR}/extern/llama.cpp/include
    ${PROJECT_SOURCE_DIR}/extern/llama.cpp/common
)

# Define the output directory for this specific library
set_target_properties(jniLlamaCppWrapper
    PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/libs"
)

# Link code to the llama library.
# CMake ensures that 'llama' and 'common' are built first and links it correctly.
target_link_libraries(jniLlamaCppWrapper PRIVATE llama common)